// Content script ƒë·ªÉ ph√¢n t√≠ch b·∫£ng ch·∫•m c√¥ng Terra
class TerraTimeAnalyzer {
    constructor() {
        this.tableData = [];
        this.terraTable = null;
        this.init();
    }

    init() {
        // Ch·ªâ l·∫Øng nghe message t·ª´ popup, kh√¥ng t·∫°o n√∫t tr√™n trang
        this.setupMessageListener();
    }

    setupMessageListener() {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            switch (request.action) {
                case 'checkTerraTable':
                    // T√¨m ki·∫øm l·∫°i b·∫£ng khi ƒë∆∞·ª£c y√™u c·∫ßu
                    const found = this.findTerraTable();
                    const data = found ? this.getTableInfo() : null;
                    sendResponse({ found, data });
                    break;

                case 'analyzeTable':
                    // T√¨m l·∫°i b·∫£ng tr∆∞·ªõc khi ph√¢n t√≠ch
                    if (!this.terraTable) {
                        this.findTerraTable();
                    }

                    this.performAnalysis().then(result => {
                        sendResponse(result);
                    }).catch(error => {
                        sendResponse({ success: false, error: error.message });
                    });
                    return true; // Gi·ªØ k√™nh message m·ªü cho async response



                case 'showDetails':
                    // S·ª≠a l·ªói: truy·ªÅn ƒë√∫ng d·ªØ li·ªáu analysis 
                    if (this.tableData && this.tableData.length > 0) {
                        const analysis = this.calculateTime(this.tableData);
                        this.showDetailedResults(analysis);
                        sendResponse({ success: true });
                    } else {
                        // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, ph√¢n t√≠ch l·∫°i
                        this.performAnalysis().then(result => {
                            if (result.success) {
                                this.showDetailedResults(result.analysis);
                                sendResponse({ success: true });
                            } else {
                                sendResponse({ success: false, error: 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt' });
                            }
                        });
                        return true; // Async response
                    }
                    break;

                case 'rescanPage':
                    // T√≠nh nƒÉng: qu√©t l·∫°i trang ƒë·ªÉ t√¨m b·∫£ng
                    console.log('üîÑ ƒêang qu√©t l·∫°i trang...');
                    this.terraTable = null; // Reset
                    this.tableData = []; // Reset data
                    const foundTable = this.findTerraTable();
                    sendResponse({ found: foundTable, message: foundTable ? 'ƒê√£ t√¨m th·∫•y b·∫£ng!' : 'V·∫´n kh√¥ng t√¨m th·∫•y b·∫£ng' });
                    break;
            }
        });
    }

    getTableInfo() {
        if (!this.terraTable) return null;

        const tbody = this.terraTable.closest('.el-table')?.querySelector('.el-table__body tbody');
        const rowCount = tbody ? tbody.querySelectorAll('tr').length : 0;

        return {
            recordCount: rowCount,
            tableFound: true
        };
    }

    async performAnalysis() {
        try {
            const data = this.extractTableData();
            if (data.length === 0) {
                throw new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong b·∫£ng');
            }

            const analysis = this.calculateTime(data);
            this.tableData = data; // L∆∞u ƒë·ªÉ export sau

            return {
                success: true,
                analysis
            };
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }

    findTerraTable() {
        console.log('üîç ƒêang t√¨m ki·∫øm b·∫£ng Terra...');

        // T√¨m b·∫£ng c√≥ header ch·ª©a "Ng√†y", "Ph√¢n lo·∫°i", "D·ª± ki·∫øn", "Th·ª±c t·∫ø"
        const tables = document.querySelectorAll('table');
        console.log(`T√¨m th·∫•y ${tables.length} b·∫£ng tr√™n trang`);

        for (let table of tables) {
            const headers = table.querySelectorAll('th .cell, th');
            const headerTexts = Array.from(headers).map(h => h.textContent.trim());

            console.log('Header texts:', headerTexts);

            // Ki·ªÉm tra c√°c pattern kh√°c nhau cho b·∫£ng Terra
            const hasNgay = headerTexts.some(text => text.includes('Ng√†y') || text.includes('Date'));
            const hasPhanLoai = headerTexts.some(text => text.includes('Ph√¢n lo·∫°i') || text.includes('Type'));
            const hasDuKien = headerTexts.some(text => text.includes('D·ª± ki·∫øn') || text.includes('Expected') || text.includes('Plan'));
            const hasThucTe = headerTexts.some(text => text.includes('Th·ª±c t·∫ø') || text.includes('Actual'));

            if (hasNgay && (hasPhanLoai || hasDuKien || hasThucTe)) {
                this.terraTable = table;
                console.log('‚úÖ ƒê√£ t√¨m th·∫•y b·∫£ng Terra:', table);
                console.log('Headers found:', headerTexts);
                return true;
            }
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo class name
        const elTables = document.querySelectorAll('.el-table, [class*="table"]');
        console.log(`T√¨m ki·∫øm theo class: ${elTables.length} b·∫£ng`);

        for (let table of elTables) {
            const allText = table.textContent.toLowerCase();
            if (allText.includes('ng√†y') && (allText.includes('d·ª± ki·∫øn') || allText.includes('th·ª±c t·∫ø'))) {
                this.terraTable = table;
                console.log('‚úÖ T√¨m th·∫•y b·∫£ng Terra theo n·ªôi dung:', table);
                return true;
            }
        }

        console.log('‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng Terra');
        return false;
    }

    // H√†m createAnalyzeButton v√† analyzeTable ƒë√£ b·ªã x√≥a 
    // Extension ch·ªâ ho·∫°t ƒë·ªông th√¥ng qua popup

    extractTableData() {
        console.log('üìä B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ b·∫£ng...');

        if (!this.terraTable) {
            console.log('‚ùå Kh√¥ng c√≥ b·∫£ng Terra ƒë·ªÉ tr√≠ch xu·∫•t');
            return [];
        }

        // Th·ª≠ c√°c c√°ch t√¨m tbody kh√°c nhau
        let tbody = null;

        // C√°ch 1: T√¨m tbody trong el-table
        tbody = this.terraTable.closest('.el-table')?.querySelector('.el-table__body tbody');

        // C√°ch 2: T√¨m tbody tr·ª±c ti·∫øp trong table
        if (!tbody) {
            tbody = this.terraTable.querySelector('tbody');
        }

        // C√°ch 3: T√¨m t·∫•t c·∫£ tr c√≥ data (kh√¥ng ph·∫£i header)
        if (!tbody) {
            const allRows = this.terraTable.querySelectorAll('tr');
            console.log(`T√¨m th·∫•y ${allRows.length} h√†ng t·ªïng c·ªông`);

            // L·ªçc ra nh·ªØng h√†ng kh√¥ng ph·∫£i header
            const dataRows = Array.from(allRows).filter(row => {
                const cells = row.querySelectorAll('td');
                return cells.length > 0; // H√†ng c√≥ td (kh√¥ng ch·ªâ th)
            });

            if (dataRows.length > 0) {
                console.log(`T√¨m th·∫•y ${dataRows.length} h√†ng d·ªØ li·ªáu`);
                return this.processDataRows(dataRows);
            }
        }

        if (!tbody) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y tbody ho·∫∑c d·ªØ li·ªáu');
            return [];
        }

        const rows = tbody.querySelectorAll('tr');
        console.log(`T√¨m th·∫•y ${rows.length} h√†ng trong tbody`);

        return this.processDataRows(Array.from(rows));
    }

    processDataRows(rows) {
        const data = [];
        let currentDate = null; // Theo d√µi ng√†y hi·ªán t·∫°i

        rows.forEach((row, index) => {
            // Th·ª≠ c√°c c√°ch t√¨m cell kh√°c nhau
            let cells = row.querySelectorAll('td .cell');

            // N·∫øu kh√¥ng c√≥ .cell, th·ª≠ l·∫•y td tr·ª±c ti·∫øp
            if (cells.length === 0) {
                cells = row.querySelectorAll('td');
            }

            console.log(`H√†ng ${index + 1}: ${cells.length} √¥`);

            if (cells.length >= 6) { // √çt nh·∫•t c·∫ßn 6 c·ªôt
                const ngayText = this.getCellText(cells[0]);
                const phanLoaiText = this.getCellText(cells[1]);

                // C·∫≠p nh·∫≠t ng√†y hi·ªán t·∫°i n·∫øu d√≤ng n√†y c√≥ ng√†y
                if (ngayText && ngayText !== '' && !ngayText.includes('Ng√†y')) {
                    currentDate = ngayText;
                }

                const rowData = {
                    ngay: ngayText || currentDate, // S·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i n·∫øu d√≤ng kh√¥ng c√≥ ng√†y
                    phanLoai: phanLoaiText,
                    duKienVao: this.getCellText(cells[2]),
                    duKienRa: this.getCellText(cells[3]),
                    thucTeVao: this.getCellTextFromInput(cells[4]), // C·ªôt th·ª±c t·∫ø v√†o c√≥ input
                    thucTeRa: this.getCellTextFromInput(cells[5]),   // C·ªôt th·ª±c t·∫ø ra c√≥ input
                    gioLam: cells.length > 6 ? this.getCellText(cells[6]) : '',
                    tangCa: cells.length > 7 ? this.getCellText(cells[7]) : ''
                };

                console.log('D·ªØ li·ªáu h√†ng:', rowData);

                // Ch·ªâ th√™m h√†ng c√≥ ph√¢n lo·∫°i l√† "ƒêi l√†m" (v√† c√≥ ng√†y h·ª£p l·ªá)
                const hasValidDate = rowData.ngay && rowData.ngay !== '' && !rowData.ngay.includes('Ng√†y');
                const isWorkRow = rowData.phanLoai && rowData.phanLoai.toLowerCase().includes('ƒëi l√†m');
                
                if (hasValidDate && isWorkRow) {
                    data.push(rowData);
                    console.log(`‚úÖ Th√™m d√≤ng ƒëi l√†m: ${rowData.ngay} - ${rowData.phanLoai}`);
                } else if (hasValidDate) {
                    console.log(`‚è≠Ô∏è B·ªè qua d√≤ng kh√¥ng ph·∫£i ƒëi l√†m: ${rowData.ngay} - ${rowData.phanLoai}`);
                }
            }
        });

        console.log(`‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c ${data.length} h√†ng d·ªØ li·ªáu h·ª£p l·ªá`);
        return data;
    }

    getCellText(cell) {
        if (!cell) return '';

        // L·∫•y text th∆∞·ªùng t·ª´ .cell ho·∫∑c tr·ª±c ti·∫øp t·ª´ element
        const cellDiv = cell.querySelector('.cell');
        let text = cellDiv ? cellDiv.textContent.trim() : cell.textContent.trim();

        // L√†m s·∫°ch text cho c·ªôt ph√¢n lo·∫°i - ∆∞u ti√™n l·∫•y d√≤ng "ƒêi l√†m"
        const lines = text.split('\n');
        if (lines.length > 1) {
            // ∆Øu ti√™n t√¨m d√≤ng ch·ª©a "ƒêi l√†m" tr∆∞·ªõc
            for (let line of lines) {
                const cleanLine = line.trim();
                if (cleanLine && cleanLine.toLowerCase().includes('ƒëi l√†m')) {
                    return cleanLine;
                }
            }
            
            // N·∫øu kh√¥ng c√≥ "ƒêi l√†m", l·∫•y d√≤ng ƒë·∫ßu ti√™n kh√¥ng r·ªóng v√† kh√¥ng ph·∫£i ƒëƒÉng k√Ω/c√¥ng t√°c
            for (let line of lines) {
                const cleanLine = line.trim();
                if (cleanLine && !cleanLine.includes('ƒêƒÉng k√Ω') && !cleanLine.includes('C√¥ng t√°c')) {
                    return cleanLine;
                }
            }
        }

        return text;
    }

    getCellTextFromInput(cell) {
        if (!cell) return '';

        // ∆Øu ti√™n l·∫•y gi√° tr·ªã t·ª´ input field (cho c·ªôt th·ª±c t·∫ø v√†o/ra)
        const input = cell.querySelector('input');
        if (input && input.value) {
            return input.value.trim();
        }

        // Fallback: l·∫•y text th∆∞·ªùng n·∫øu kh√¥ng c√≥ input
        const cellDiv = cell.querySelector('.cell');
        return cellDiv ? cellDiv.textContent.trim() : cell.textContent.trim();
    }

    calculateTime(data) {
        console.log('üßÆ B·∫Øt ƒë·∫ßu t√≠nh to√°n th·ªùi gian theo quy t·∫Øc Terra...');

        let tongPhutThieu = 0;
        let tongPhutThua = 0;
        let soNgayLamViec = 0;
        let chiTietNgay = [];

        data.forEach(row => {
            // Data ƒë√£ ƒë∆∞·ª£c l·ªçc ch·ªâ ch·ª©a d√≤ng "ƒêi l√†m" t·ª´ processDataRows()
            // ƒê·∫øm ng√†y l√†m vi·ªác ƒë·∫ßy ƒë·ªß
            soNgayLamViec += 1;
            console.log(`üìÖ Ng√†y l√†m vi·ªác: ${row.ngay} - ${row.phanLoai}`);

            const thongTinNgay = this.tinhToanNgay(row);
            chiTietNgay.push(thongTinNgay);

            tongPhutThieu += thongTinNgay.phutThieu;
            tongPhutThua += thongTinNgay.phutThua;

            console.log(`Ng√†y ${row.ngay}:`, thongTinNgay);
        });

        const phutConThieu = tongPhutThieu - tongPhutThua;
        const gioConThieu = (phutConThieu / 60).toFixed(2);

        const ketQua = {
            soNgayLamViec,
            tongPhutThieu,
            tongPhutThua,
            phutConThieu,
            gioConThieu,
            tongGioLamDuKien: (soNgayLamViec * 8).toFixed(2), // 8h/ng√†y
            tongGioLamThucTe: ((soNgayLamViec * 8 * 60 - phutConThieu) / 60).toFixed(2),
            chiTietNgay,
            data
        };

        console.log('üìä K·∫øt qu·∫£ t√≠nh to√°n:', ketQua);
        return ketQua;
    }

    tinhToanNgay(rowData) {
        const { ngay, thucTeVao, thucTeRa } = rowData;

        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p thi·∫øu d·ªØ li·ªáu th·ªùi gian
        if (!thucTeVao || !thucTeRa || thucTeVao === '--:--' || thucTeRa === '--:--') {
            return {
                ngay,
                loaiCa: 'Kh√¥ng x√°c ƒë·ªãnh',
                phutThieu: 0,
                phutThua: 0,
                ghiChu: 'Thi·∫øu d·ªØ li·ªáu th·ªùi gian'
            };
        }

        const thoiGianVao = this.chuanHoaGio(thucTeVao);
        const thoiGianRa = this.chuanHoaGio(thucTeRa);

        // X√°c ƒë·ªãnh lo·∫°i ca
        let loaiCa = this.xacDinhLoaiCa(thoiGianVao, thoiGianRa);

        // T√≠nh thi·∫øu gi·ªù - bao g·ªìm c·∫£ v√†o mu·ªôn v√† ra s·ªõm
        let thongTinThieu;
        thongTinThieu = this.tinhPhutThieuDayDu(thoiGianVao, thoiGianRa, loaiCa);

        // T√≠nh th·ª´a gi·ªù
        const phutThua = this.tinhPhutThua(thoiGianVao, thoiGianRa, loaiCa);

        return {
            ngay,
            loaiCa,
            thoiGianVao,
            thoiGianRa,
            phutThieu: thongTinThieu.phut,
            phutThua,
            ghiChu: thongTinThieu.ghiChu
        };
    }

    tinhThoiGianLamThucTe(thoiGianVao, thoiGianRa, loaiCa) {
        let thoiGianLam = thoiGianRa - thoiGianVao;
        
        // Ca s√°ng: ch·ªâ t√≠nh ƒë·∫øn tr∆∞·ªõc 12:00
        if (loaiCa.includes('Ca s√°ng')) {
            const sangKetThuc = 12 * 60; // 12:00
            if (thoiGianRa > sangKetThuc) {
                // N·∫øu ra sau 12:00, ch·ªâ t√≠nh ƒë·∫øn 12:00
                thoiGianLam = sangKetThuc - thoiGianVao;
            }
        }
        // Ca chi·ªÅu: ch·ªâ t√≠nh t·ª´ 13:00 tr·ªü ƒëi
        else if (loaiCa.includes('Ca chi·ªÅu')) {
            const chieuBatDau = 13 * 60; // 13:00
            if (thoiGianVao < chieuBatDau) {
                // N·∫øu v√†o tr∆∞·ªõc 13:00, ch·ªâ t√≠nh t·ª´ 13:00
                thoiGianLam = thoiGianRa - chieuBatDau;
            }
        }
        // Ca to√†n th·ªùi gian: tr·ª´ th·ªùi gian ngh·ªâ tr∆∞a (12:00-13:00)
        else {
            const nghiTruaBatDau = 12 * 60; // 12:00
            const nghiTruaKetThuc = 13 * 60; // 13:00
            
            // Ch·ªâ tr·ª´ ngh·ªâ tr∆∞a n·∫øu l√†m vi·ªác qua khung 12:00-13:00
            if (thoiGianVao < nghiTruaKetThuc && thoiGianRa > nghiTruaBatDau) {
                const batDauNghiTrua = Math.max(thoiGianVao, nghiTruaBatDau);
                const ketThucNghiTrua = Math.min(thoiGianRa, nghiTruaKetThuc);
                const thoiGianNghiTrua = ketThucNghiTrua - batDauNghiTrua;
                thoiGianLam -= thoiGianNghiTrua;
            }
        }
        
        return Math.max(0, thoiGianLam); // Kh√¥ng ƒë·ªÉ √¢m
    }

    chuanHoaGio(timeStr) {
        // Chuy·ªÉn ƒë·ªïi th·ªùi gian th√†nh ph√∫t t·ª´ 00:00
        const parts = timeStr.split(':');
        const hours = parseInt(parts[0]) || 0;
        const minutes = parseInt(parts[1]) || 0;
        return hours * 60 + minutes;
    }

    phutSangGio(phut) {
        const h = Math.floor(phut / 60);
        const m = phut % 60;
        return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
    }

    xacDinhLoaiCa(thoiGianVao, thoiGianRa) {
        const giua_ngay = 12 * 60; // 12:00 = 720 ph√∫t
        const mot_gio_chieu = 13 * 60; // 13:00 = 780 ph√∫t

        // Ca s√°ng: v√†o v√† ra ƒë·ªÅu tr∆∞·ªõc 13:00
        if (thoiGianVao < mot_gio_chieu && thoiGianRa < mot_gio_chieu) {
            return 'Ca s√°ng';
        }
        // Ca chi·ªÅu: v√†o sau 12:00
        else if (thoiGianVao > giua_ngay) {
            return 'Ca chi·ªÅu';
        }
        // Ca to√†n th·ªùi gian: v√†o tr∆∞·ªõc 13:00 v√† ra sau 13:00
        else {
            return 'Ca to√†n th·ªùi gian';
        }
    }

    tinhPhutThieuDayDu(thoiGianVao, thoiGianRa, loaiCa) {
        // Logic HYBRID: Dynamic cho v√†o trong khung flexible, Fixed cho v√†o mu·ªôn
        let gio_vao_chuan, gio_lam_yeu_cau;
        let gio_flex_start, gio_flex_end; // Khung gi·ªù flexible

        // X√°c ƒë·ªãnh khung gi·ªù chu·∫©n v√† flexible theo lo·∫°i ca
        if (loaiCa.includes('Ca chi·ªÅu')) {
            gio_vao_chuan = 13 * 60; // 13:00
            gio_lam_yeu_cau = 4 * 60; // 4 gi·ªù = 240 ph√∫t
            gio_flex_start = 13 * 60; // 13:00
            gio_flex_end = 13 * 60 + 30; // 13:30
        } else if (loaiCa.includes('Ca s√°ng')) {
            gio_vao_chuan = 8 * 60 + 30; // 08:30
            gio_lam_yeu_cau = 4 * 60; // 4 gi·ªù = 240 ph√∫t
            gio_flex_start = 7 * 60 + 30; // 07:30
            gio_flex_end = 8 * 60; // 08:00
        } else {
            // Ca to√†n th·ªùi gian
            gio_vao_chuan = 8 * 60 + 30; // 08:30
            gio_lam_yeu_cau = 8 * 60; // 8 gi·ªù = 480 ph√∫t
            gio_flex_start = 7 * 60 + 30; // 07:30
            gio_flex_end = 8 * 60 + 30; // 08:30
        }

        let phutThieu = 0;
        let ghiChu = '';

        // T√≠nh to√°n thi·∫øu gi·ªù cho t·∫•t c·∫£ lo·∫°i ca

            // 1. T√≠nh v√†o mu·ªôn d·ª±a tr√™n khung flexible
            if (thoiGianVao > gio_flex_end) {
                const phutMuon = thoiGianVao - gio_flex_end;
                phutThieu += phutMuon;
                if (loaiCa.includes('Ca chi·ªÅu')) {
                    ghiChu += `V√†o mu·ªôn: ${phutMuon}p (sau 13:30); `;
                } else if (loaiCa.includes('Ca s√°ng')) {
                    ghiChu += `V√†o mu·ªôn: ${phutMuon}p (sau 08:00); `;
                } else {
                    ghiChu += `V√†o mu·ªôn: ${phutMuon}p (sau 08:00); `;
                }
            }

            // 2. T√≠nh gi·ªù ra chu·∫©n (HYBRID LOGIC)
            let gio_ra_chuan;
            if (loaiCa.includes('Ca chi·ªÅu')) {
                // Ca chi·ªÅu: dynamic trong khung flexible
                gio_ra_chuan = thoiGianVao + gio_lam_yeu_cau; // V√†o + 4h
            } else if (loaiCa.includes('Ca s√°ng')) {
                // Ca s√°ng: dynamic trong khung flexible
                gio_ra_chuan = thoiGianVao + gio_lam_yeu_cau; // V√†o + 4h
            } else {
                // Ca to√†n: Dynamic n·∫øu v√†o trong khung flexible, Fixed n·∫øu v√†o mu·ªôn
                if (thoiGianVao <= gio_flex_end) {
                    // V√†o trong khung flexible (7:30-8:00) ‚Üí Dynamic
                    const gio_vao_flex = Math.max(thoiGianVao, gio_flex_start);
                    gio_ra_chuan = gio_vao_flex + gio_lam_yeu_cau + 60; // V√†o + 8h + 1h ngh·ªâ tr∆∞a
                } else {
                    // V√†o mu·ªôn sau 8:00 ‚Üí Fixed (b·ªã ph·∫°t)
                    gio_ra_chuan = 17 * 60 + 30; // 17:30 c·ªë ƒë·ªãnh
                }
            }

            // 3. T√≠nh ra s·ªõm (so v·ªõi gi·ªù ra chu·∫©n)
            if (thoiGianRa < gio_ra_chuan) {
                const phutRaSom = gio_ra_chuan - thoiGianRa;
                phutThieu += phutRaSom;
                ghiChu += `Ra s·ªõm: ${phutRaSom}p (chu·∫©n: ${this.phutSangGio(gio_ra_chuan)}); `;
            }

            // 4. Ki·ªÉm tra th·ªùi gian l√†m vi·ªác th·ª±c t·∫ø (c√≥ tr·ª´ ngh·ªâ tr∆∞a cho ca to√†n th·ªùi gian)
            const phutLamThucTe = this.tinhThoiGianLamThucTe(thoiGianVao, thoiGianRa, loaiCa);
            const phutCanLam = gio_lam_yeu_cau;
            
            if (phutLamThucTe < phutCanLam) {
                const phutThieuGioLam = phutCanLam - phutLamThucTe;
                // Ch·ªâ t√≠nh thi·∫øu n·∫øu ch∆∞a ƒë∆∞·ª£c t√≠nh trong c√°c b∆∞·ªõc tr∆∞·ªõc
                if (phutThieu < phutThieuGioLam) {
                    phutThieu = phutThieuGioLam;
                    ghiChu = `Thi·∫øu gi·ªù l√†m: ${phutThieuGioLam}p (l√†m ${(phutLamThucTe/60).toFixed(1)}h/${(phutCanLam/60)}h, ƒë√£ tr·ª´ ngh·ªâ tr∆∞a n·∫øu c√≥); `;
                }
            }

            // T·∫°o ghi ch√∫ chi ti·∫øt
            if (phutThieu === 0) {
                ghiChu = `ƒê·ªß gi·ªù (${this.phutSangGio(thoiGianVao)} - ${this.phutSangGio(thoiGianRa)}, ƒë√£ tr·ª´ ngh·ªâ tr∆∞a n·∫øu c√≥)`;
            } else {
                ghiChu = ghiChu.replace(/; $/, '') + ` ‚Üí T·ªïng thi·∫øu: ${phutThieu}p`;
                ghiChu += ` (${this.phutSangGio(thoiGianVao)} - ${this.phutSangGio(thoiGianRa)})`;
            }

        return {
            phut: phutThieu,
            ghiChu: ghiChu
        };
    }

    // H√†m tinhPhutRaSom ƒë√£ ƒë∆∞·ª£c g·ªôp v√†o tinhPhutThieuDayDu (logic b√π tr·ª´)

    tinhPhutThua(thoiGianVao, thoiGianRa, loaiCa) {
        let gio_ra_chuan;

        // X√°c ƒë·ªãnh gi·ªù ra chu·∫©n theo lo·∫°i ca
        if (loaiCa.includes('Ca chi·ªÅu')) {
            gio_ra_chuan = 17 * 60; // 17:00 = 1020 ph√∫t cho ca chi·ªÅu
        } else if (loaiCa.includes('Ca s√°ng')) {
            gio_ra_chuan = 12 * 60 + 30; // 12:30 = 750 ph√∫t cho ca s√°ng
        } else {
            gio_ra_chuan = 17 * 60 + 30; // 17:30 = 1050 ph√∫t cho ca to√†n th·ªùi gian
        }

        // Ki·ªÉm tra xem c√≥ l√†m th√™m gi·ªù kh√¥ng
        if (thoiGianRa > gio_ra_chuan) {
            const phutThua = thoiGianRa - gio_ra_chuan;

            // CH·ªà T√çNH KHI >= 30 PH√öT
            if (phutThua >= 30) {
                // L√†m tr√≤n xu·ªëng 15 ph√∫t (theo quy ƒë·ªãnh c√¥ng ty)
                const phutThuaLamTron = Math.floor(phutThua / 15) * 15;

                console.log(`Overtime (${loaiCa}): ${phutThua} ph√∫t (>= 30p) ‚Üí l√†m tr√≤n xu·ªëng ${phutThuaLamTron} ph√∫t`);
                return phutThuaLamTron;
            } else {
                console.log(`Overtime (${loaiCa}): ${phutThua} ph√∫t (< 30p) ‚Üí KH√îNG T√çNH`);
                return 0;
            }
        }

        return 0;
    }

    calculateHours(timeIn, timeOut) {
        try {
            const [inHour, inMin] = timeIn.split(':').map(Number);
            const [outHour, outMin] = timeOut.split(':').map(Number);

            const inMinutes = inHour * 60 + inMin;
            let outMinutes = outHour * 60 + outMin;

            // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p qua ng√†y
            if (outMinutes < inMinutes) {
                outMinutes += 24 * 60;
            }

            const totalMinutes = outMinutes - inMinutes;
            return totalMinutes / 60;
        } catch (error) {
            console.error('L·ªói t√≠nh to√°n gi·ªù:', error);
            return 0;
        }
    }

    showResults(analysis) {
        // X√≥a modal c≈© n·∫øu c√≥
        const existingModal = document.getElementById('terra-modal');
        if (existingModal) {
            existingModal.remove();
        }

        // T·∫°o modal hi·ªÉn th·ªã k·∫øt qu·∫£
        const modal = document.createElement('div');
        modal.id = 'terra-modal';
        modal.className = 'terra-modal-overlay';

        const content = document.createElement('div');
        content.className = 'terra-modal-content';

        const shortageStatus = parseFloat(analysis.phutConThieu) > 0 ? 'shortage' : 'complete';
        const shortageIcon = parseFloat(analysis.phutConThieu) > 0 ? '‚ö†Ô∏è' : '‚úÖ';
        const shortageText = parseFloat(analysis.phutConThieu) > 0 ? 'C√≤n thi·∫øu' : 'ƒê√£ ƒë·ªß/th·ª´a';
        const shortageValue = Math.abs(parseFloat(analysis.phutConThieu));
        const shortageUnit = shortageValue >= 60 ? `${(shortageValue / 60).toFixed(1)}h` : `${shortageValue}p`;

        content.innerHTML = `
            <div class="terra-modal-header">
                <h2>üìä Ph√¢n t√≠ch th·ªùi gian Terra (New Logic)</h2>
                <p>B√°o c√°o chi ti·∫øt theo quy t·∫Øc ch·∫•m c√¥ng</p>
            </div>
            
            <div class="terra-stats-grid">
                <div class="terra-stat-card">
                    <h3>Ng√†y l√†m vi·ªác</h3>
                    <div class="value">${analysis.soNgayLamViec}</div>
                </div>
                <div class="terra-stat-card">
                    <h3>T·ªïng ph√∫t thi·∫øu</h3>
                    <div class="value" style="color: #d32f2f;">${analysis.tongPhutThieu}p</div>
                </div>
                <div class="terra-stat-card">
                    <h3>T·ªïng ph√∫t th·ª´a</h3>
                    <div class="value" style="color: #2e7d32;">${analysis.tongPhutThua}p</div>
                </div>
                <div class="terra-stat-card ${shortageStatus}">
                    <h3>${shortageIcon} ${shortageText}</h3>
                    <div class="value">${shortageUnit}</div>
                </div>
            </div>
            
            <div style="margin: 15px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; font-size: 13px;">
                <strong>üìã T√≥m t·∫Øt:</strong><br>
                ‚Ä¢ Gi·ªù chu·∫©n: ${analysis.tongGioLamDuKien}h (${analysis.soNgayLamViec} ng√†y √ó 8h)<br>
                ‚Ä¢ Gi·ªù th·ª±c t·∫ø: ${analysis.tongGioLamThucTe}h<br>
                ‚Ä¢ Thi·∫øu: ${analysis.tongPhutThieu} ph√∫t | Th·ª´a: ${analysis.tongPhutThua} ph√∫t<br>
                ‚Ä¢ <strong>K·∫øt qu·∫£: ${analysis.phutConThieu > 0 ? 'C·∫ßn b√π' : 'ƒê√£ ƒë·ªß'} ${shortageUnit}</strong><br>
                <small style="color: #666;">* Ch·ªâ t√≠nh th·ª´a gi·ªù khi >= 30 ph√∫t, l√†m tr√≤n xu·ªëng 15p</small>
            </div>
            
            <div class="terra-actions" style="display: flex; gap: 10px; width: 100%; margin-top: 20px;">
                <button class="terra-btn terra-btn-primary" id="terra-detail-btn" style="flex: 1; padding: 12px 24px; font-size: 14px;">üìã Xem chi ti·∫øt</button>
                <button class="terra-btn terra-btn-danger" id="terra-close-btn" style="flex: 1; padding: 12px 24px; font-size: 14px;">‚úï ƒê√≥ng</button>
            </div>
        `;

        modal.appendChild(content);
        document.body.appendChild(modal);

        // X·ª≠ l√Ω s·ª± ki·ªán
        document.getElementById('terra-close-btn').addEventListener('click', () => {
            document.body.removeChild(modal);
        });

        document.getElementById('terra-detail-btn').addEventListener('click', () => {
            this.showDetailedResults(analysis);
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                document.body.removeChild(modal);
            }
        });
    }

    showDetailedResults(analysis) {
        // T·∫°o modal chi ti·∫øt
        const modal = document.createElement('div');
        modal.className = 'terra-modal-overlay';

        const content = document.createElement('div');
        content.className = 'terra-modal-content';
        content.style.maxWidth = '900px';

        let tableHTML = `
            <div class="terra-modal-header">
                <h2>üìã Chi ti·∫øt th·ªùi gian l√†m vi·ªác</h2>
                <p>Ph√¢n t√≠ch t·ª´ng ng√†y theo quy t·∫Øc Terra</p>
            </div>
            
            <table class="terra-detail-table">
                <thead>
                    <tr>
                        <th>Ng√†y</th>
                        <th>Lo·∫°i ca</th>
                        <th>V√†o</th>
                        <th>Ra</th>
                        <th>Thi·∫øu (p)</th>
                        <th>Th·ª´a (p)</th>
                        <th>Ghi ch√∫</th>
                    </tr>
                </thead>
                <tbody>
        `;

        if (analysis.chiTietNgay && analysis.chiTietNgay.length > 0) {
            analysis.chiTietNgay.forEach(ngay => {
                const thieuClass = ngay.phutThieu > 0 ? 'style="color: #d32f2f; font-weight: bold;"' : '';
                const thuaClass = ngay.phutThua > 0 ? 'style="color: #2e7d32; font-weight: bold;"' : '';

                tableHTML += `
                    <tr>
                        <td>${ngay.ngay}</td>
                        <td><small>${ngay.loaiCa}</small></td>
                        <td>${ngay.thoiGianVao ? this.phutSangGio(ngay.thoiGianVao) : '-'}</td>
                        <td>${ngay.thoiGianRa ? this.phutSangGio(ngay.thoiGianRa) : '-'}</td>
                        <td ${thieuClass}>${ngay.phutThieu || 0}</td>
                        <td ${thuaClass}>${ngay.phutThua || 0}</td>
                        <td><small>${ngay.ghiChu || ''}</small></td>
                    </tr>
                `;
            });
        } else {
            // Fallback: hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc
            analysis.data.forEach(row => {
                tableHTML += `
                    <tr>
                        <td>${row.ngay}</td>
                        <td>${row.phanLoai}</td>
                        <td>${row.thucTeVao}</td>
                        <td>${row.thucTeRa}</td>
                        <td>-</td>
                        <td>-</td>
                        <td>D·ªØ li·ªáu g·ªëc</td>
                    </tr>
                `;
            });
        }

        tableHTML += `
                </tbody>
            </table>
            
            <div class="terra-actions" style="width: 100%; display: flex; justify-content: center; margin-top: 20px;">
                <button class="terra-btn terra-btn-danger" id="terra-close-detail-btn" style="width: 100%; min-width: 120px; padding: 12px 24px; font-size: 14px;">‚úï ƒê√≥ng</button>
            </div>
        `;

        content.innerHTML = tableHTML;
        modal.appendChild(content);
        document.body.appendChild(modal);

        // X·ª≠ l√Ω s·ª± ki·ªán
        document.getElementById('terra-close-detail-btn').addEventListener('click', () => {
            document.body.removeChild(modal);
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                document.body.removeChild(modal);
            }
        });
    }
}

// Kh·ªüi t·∫°o khi trang ƒë∆∞·ª£c t·∫£i
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new TerraTimeAnalyzer());
} else {
    new TerraTimeAnalyzer();
}
