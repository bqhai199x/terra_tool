// Popup script ƒë∆°n gi·∫£n ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi Terra extension
class TerraPopup {
    constructor() {
        this.currentTab = null;
        this.contentScriptInjected = false;
        this.init();
    }

    async init() {
        try {
            // L·∫•y tab hi·ªán t·∫°i
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            this.currentTab = tab;
            
            // Thi·∫øt l·∫≠p event listeners
            this.setupEventListeners();
            
            // Ki·ªÉm tra trang Terra
            await this.checkTerraPage();

        } catch (error) {
            console.error('L·ªói kh·ªüi t·∫°o popup:', error);
            this.showError('Kh√¥ng th·ªÉ kh·ªüi t·∫°o extension');
        }
    }

    setupEventListeners() {
        // Event delegation ƒë·ªÉ x·ª≠ l√Ω c√°c n√∫t ƒë∆∞·ª£c t·∫°o ƒë·ªông
        document.addEventListener('click', async (e) => {
            const target = e.target;
            if (target.id === 'analyzeBtn') {
                await this.analyzeTimesheet();
            } else if (target.id === 'refreshBtn') {
                await this.checkTerraPage();
            } else if (target.id === 'rescanBtn') {
                await this.rescanPage();
            } else if (target.id === 'detailBtn') {
                await this.showDetails();
            } else if (target.id === 'configBtn') {
                await this.showConfigModal();
            }
        });
    }

    async checkTerraPage() {
        try {
            // Hi·ªÉn th·ªã loading
            const content = document.getElementById('content');
            content.innerHTML = `
                <div class="loading">
                    ƒêang ki·ªÉm tra trang Terra...
                </div>
            `;

            // Inject content script v·ªõi error handling
            await this.injectContentScript();

            // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ script kh·ªüi t·∫°o
            await new Promise(resolve => setTimeout(resolve, 500));

            // Ki·ªÉm tra b·∫£ng Terra v·ªõi timeout
            const result = await Promise.race([
                this.sendMessageToContent({ action: 'checkTerraTable' }),
                new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000))
            ]);
            if (result && result.found) {
                this.showTerraInterface(result.data);
            } else if (result && result.error) {
                // Handle URL validation error from content script
                this.showError(result.error);
            } else {
                this.showError('L·ªói khi qu√©t l·∫°i trang');
            }
        } catch (error) {
            console.log('L·ªói ki·ªÉm tra trang:', error.message);
            this.showError('L·ªói khi qu√©t l·∫°i trang');
        }
    }

    async injectContentScript() {
        try {
            // Ki·ªÉm tra xem content script ƒë√£ ƒë∆∞·ª£c inject ch∆∞a
            try {
                const testResult = await Promise.race([
                    this.sendMessageToContent({ action: 'ping' }),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('No response')), 1000))
                ]);
                
                if (testResult && testResult.pong) {
                    console.log('Content script ƒë√£ c√≥ s·∫µn');
                    this.contentScriptInjected = true;
                    return;
                }
            } catch (error) {
                console.log('Content script ch∆∞a c√≥, c·∫ßn inject...');
            }

            // Content script ch∆∞a ƒë∆∞·ª£c inject ho·∫∑c kh√¥ng ph·∫£n h·ªìi
            try {
                // S·ª≠ d·ª•ng chrome.scripting API (Manifest V3)
                if (chrome.scripting && chrome.scripting.executeScript) {
                    await chrome.scripting.executeScript({
                        target: { tabId: this.currentTab.id },
                        files: ['content.js']
                    });
                    console.log('‚úÖ Inject content script th√†nh c√¥ng (Manifest V3)');
                    this.contentScriptInjected = true;
                } else {
                    throw new Error('Scripting API not available');
                }
            } catch (error) {
                console.error('L·ªói inject content script:', error);
                // Fallback: s·ª≠ d·ª•ng chrome.tabs.executeScript (Manifest V2 legacy)
                try {
                    await new Promise((resolve, reject) => {
                        chrome.tabs.executeScript(this.currentTab.id, {
                            file: 'content.js'
                        }, (result) => {
                            if (chrome.runtime.lastError) {
                                reject(new Error(chrome.runtime.lastError.message));
                            } else {
                                resolve(result);
                            }
                        });
                    });
                    console.log('‚úÖ Inject content script th√†nh c√¥ng (Fallback)');
                    this.contentScriptInjected = true;
                } catch (fallbackError) {
                    console.error('Fallback inject c≈©ng th·∫•t b·∫°i:', fallbackError);
                    throw new Error('Kh√¥ng th·ªÉ inject content script');
                }
            }
            
            // ƒê·ª£i content script kh·ªüi t·∫°o
            await new Promise(resolve => setTimeout(resolve, 300));
            
        } catch (error) {
            console.error('L·ªói trong injectContentScript:', error);
            throw error;
        }
    }

    async sendMessageToContent(message) {
        try {
            const response = await chrome.tabs.sendMessage(this.currentTab.id, message);
            return response;
        } catch (error) {
            console.error('L·ªói g·ª≠i message:', error.message);
            throw error;
        }
    }

    showTerraInterface(data) {
        const content = document.getElementById('content');
        content.innerHTML = `
            <div class="status">
                <div class="status-item">
                    <span>Tr·∫°ng th√°i:</span>
                    <span class="value">‚úÖ ƒê√£ t√¨m th·∫•y b·∫£ng Terra</span>
                </div>
                <div class="status-item">
                    <span>S·ªë b·∫£n ghi:</span>
                    <span class="value">${data?.recordCount || 0} d√≤ng</span>
                </div>
            </div>
            
            <div class="buttons">
                <button class="btn-secondary" id="refreshBtn">
                    üîÑ L√†m m·ªõi
                </button>
                <button class="btn-config" id="configBtn">
                    ‚öôÔ∏è C·∫•u h√¨nh
                </button>
            </div>
            
            <div id="results" style="margin-top: 15px;"></div>
        `;
        
        // T·ª± ƒë·ªông ph√¢n t√≠ch sau khi t√¨m th·∫•y b·∫£ng
        this.analyzeTimesheet();
    }

    showNotTerraPage() {
        const content = document.getElementById('content');
        content.innerHTML = `
            <div class="status">
                <div class="status-item">
                    <span>Tr·∫°ng th√°i:</span>
                    <span class="value">‚ö†Ô∏è Ch∆∞a t√¨m th·∫•y b·∫£ng Terra</span>
                </div>
            </div>
            
            <div style="font-size: 12px; margin: 15px 0; opacity: 0.9;">
                <p><strong>üí° H∆∞·ªõng d·∫´n:</strong></p>
                <p>‚Ä¢ M·ªü trang ch·∫•m c√¥ng Terra</p>
                <p>‚Ä¢ Click "üîç Qu√©t l·∫°i" ƒë·ªÉ t√¨m b·∫£ng</p>
            </div>
            
            <div class="buttons">
                <button class="btn-primary" id="rescanBtn">
                    üîç Qu√©t l·∫°i
                </button>
            </div>
        `;
    }

    showError(message) {
        const content = document.getElementById('content');
        content.innerHTML = `
            <div class="error">
                ‚ùå ${message}
            </div>
            
            <div class="buttons">
                <button class="btn-secondary" id="refreshBtn">
                    üîÑ Th·ª≠ l·∫°i
                </button>
            </div>
        `;
    }

    async analyzeTimesheet() {
        try {
            // Hi·ªÉn th·ªã loading
            const resultsDiv = document.getElementById('results');
            if (resultsDiv) {
                resultsDiv.innerHTML = `
                    <div class="loading">
                        ƒêang ph√¢n t√≠ch d·ªØ li·ªáu...
                    </div>
                `;
            }

            // ƒê·∫£m b·∫£o content script ƒë√£ ƒë∆∞·ª£c inject
            await this.injectContentScript();

            // G·ª≠i l·ªánh ph√¢n t√≠ch
            const result = await this.sendMessageToContent({ 
                action: 'analyzeTable' 
            });

            if (result && result.success) {
                this.displayAnalysisResults(result.analysis);
            } else {
                throw new Error(result?.error || 'Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu');
            }
        } catch (error) {
            console.error('L·ªói ph√¢n t√≠ch:', error);
            const resultsDiv = document.getElementById('results');
            if (resultsDiv) {
                resultsDiv.innerHTML = `
                    <div class="error">
                        ‚ùå L·ªói: ${error.message}
                    </div>
                `;
            }
        }
    }

    displayAnalysisResults(analysis) {
        const resultsDiv = document.getElementById('results');
        if (!resultsDiv) return;

        const shortageMinutes = parseFloat(analysis.phutConThieu) || 0;
        const shortageColor = shortageMinutes > 0 ? '#ff5252' : '#4caf50';
        const shortageIcon = shortageMinutes > 0 ? '‚ö†Ô∏è' : '‚úÖ';
        const shortageText = shortageMinutes > 0 ? 'C√≤n thi·∫øu' : 'ƒê√£ ƒë·ªß/th·ª´a';
        const shortageValue = Math.abs(shortageMinutes);
        const shortageUnit = shortageValue >= 60 ? `${(shortageValue/60).toFixed(1)}h` : `${shortageValue}p`;

        resultsDiv.innerHTML = `
            <div class="status">
                <div class="status-item">
                    <span>Ng√†y l√†m vi·ªác:</span>
                    <span class="value">${analysis.soNgayLamViec} ng√†y</span>
                </div>
                <div class="status-item">
                    <span>Ph√∫t thi·∫øu:</span>
                    <span class="value" style="color: #ff5252;">${analysis.tongPhutThieu}p</span>
                </div>
                <div class="status-item">
                    <span>Ph√∫t th·ª´a:</span>
                    <span class="value" style="color: #4caf50;">${analysis.tongPhutThua}p</span>
                </div>
                <div class="status-item" style="border-top: 1px solid rgba(255,255,255,0.2); padding-top: 8px; margin-top: 8px;">
                    <span>${shortageIcon} ${shortageText}:</span>
                    <span class="value" style="color: ${shortageColor}; font-size: 16px;">
                        ${shortageUnit}
                    </span>
                </div>
            </div>
            
            <div class="buttons" style="margin-top: 15px;">
                <button class="btn-primary" id="detailBtn">üìã Chi ti·∫øt</button>
            </div>
        `;
    }

    async rescanPage() {
        try {
            // Hi·ªÉn th·ªã loading
            const content = document.getElementById('content');
            content.innerHTML = `
                <div class="loading">
                    üîç ƒêang qu√©t l·∫°i trang...
                </div>
            `;

            // Reset content script injection flag v√† inject l·∫°i
            this.contentScriptInjected = false;
            await this.injectContentScript();

            // G·ª≠i l·ªánh qu√©t l·∫°i
            const result = await this.sendMessageToContent({ 
                action: 'rescanPage' 
            });

            if (result && result.found) {
                // T√¨m th·∫•y b·∫£ng
                const tableInfo = await this.sendMessageToContent({ 
                    action: 'checkTerraTable' 
                });
                
                if (tableInfo && tableInfo.found) {
                    this.showTerraInterface(tableInfo.data);
                } else if (tableInfo && tableInfo.error) {
                    // Handle URL validation error
                    this.showError(tableInfo.error);
                } else {
                    this.showNotTerraPage();
                }
            } else {
                // V·∫´n kh√¥ng t√¨m th·∫•y
                this.showNotTerraPage();
            }
        } catch (error) {
            console.error('L·ªói qu√©t l·∫°i:', error);
            this.showError('L·ªói khi qu√©t l·∫°i trang');
        }
    }

    async showDetails() {
        try {
            // ƒê·∫£m b·∫£o content script ƒë√£ ƒë∆∞·ª£c inject
            await this.injectContentScript();
            
            // G·ª≠i l·ªánh hi·ªÉn th·ªã chi ti·∫øt v·ªõi analysis data
            const result = await this.sendMessageToContent({ 
                action: 'showDetails'
            });
            
            if (result && result.success) {
                window.close(); // ƒê√≥ng popup sau khi m·ªü chi ti·∫øt th√†nh c√¥ng
            } else {
                console.error('L·ªói hi·ªÉn th·ªã chi ti·∫øt:', result?.error);
                // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói trong popup
                const resultsDiv = document.getElementById('results');
                if (resultsDiv) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error';
                    errorDiv.textContent = '‚ùå L·ªói hi·ªÉn th·ªã chi ti·∫øt: ' + (result?.error || 'Kh√¥ng x√°c ƒë·ªãnh');
                    errorDiv.style.marginTop = '10px';
                    resultsDiv.appendChild(errorDiv);
                    
                    // X√≥a th√¥ng b√°o sau 5 gi√¢y
                    setTimeout(() => errorDiv.remove(), 5000);
                }
            }
        } catch (error) {
            console.error('L·ªói hi·ªÉn th·ªã chi ti·∫øt:', error);
        }
    }

    async showConfigModal() {
        try {
            const result = await this.sendMessageToContent({ action: 'showConfigModal' });
            if (result && result.success) {
                // Modal s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n trang web
                // ƒê√≥ng popup ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y modal r√µ h∆°n
                window.close();
            } else {
                this.showError('Kh√¥ng th·ªÉ m·ªü c·∫•u h√¨nh: ' + (result?.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
            }
        } catch (error) {
            console.error('L·ªói m·ªü c·∫•u h√¨nh:', error);
            this.showError('L·ªói k·∫øt n·ªëi khi m·ªü c·∫•u h√¨nh');
        }
    }
}

// Kh·ªüi t·∫°o popup khi DOM ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', () => {
    new TerraPopup();
});
